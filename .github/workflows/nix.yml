name: Nix

on:
  push:
    branches: 
      - master
  pull_request:
    branches: 
      - master
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Setup Nix
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            extra-platforms = aarch64-linux      

      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        run: | # bash
          set -xeuo pipefail

          # Runner may run out of space in tmpfs
          unset TMPDIR
          
          # Build amd64 image
          nix build
          
          # Load amd64 image and extract image tag
          LOAD_OUTPUT=$(mktemp)
          docker load < result | tee ${LOAD_OUTPUT}
          read VERSION MAJOR_MINOR \
            <<<$(sed -E "s|Loaded image: ${IMAGE_NAME}:(([0-9]+\.[0-9]+)(\.[0-9])?)|\1 \2|" ${LOAD_OUTPUT})

          # Save VERSION and MAJOR_MINOR
          echo "VERSION=${VERSION}" >> ${GITHUB_ENV}
          echo "MAJOR_MINOR=${MAJOR_MINOR}" >> ${GITHUB_ENV}

          # Tag amd64 image
          docker tag ${IMAGE_NAME}:${VERSION} ${IMAGE_NAME}:${VERSION}-linux-amd64
          docker tag ${IMAGE_NAME}:${VERSION} ${IMAGE_NAME}:${MAJOR_MINOR}-linux-amd64
          docker tag ${IMAGE_NAME}:${VERSION} ${IMAGE_NAME}:latest-linux-amd64

          # Build arm64 image
          nix build --system aarch64-linux
          docker load < result

          # Tag arm64 image
          docker tag ${IMAGE_NAME}:${VERSION} ${IMAGE_NAME}:${VERSION}-linux-arm64
          docker tag ${IMAGE_NAME}:${VERSION} ${IMAGE_NAME}:${MAJOR_MINOR}-linux-arm64
          docker tag ${IMAGE_NAME}:${VERSION} ${IMAGE_NAME}:latest-linux-arm64
          
          # Remove image with VERSION tag
          docker rmi ${IMAGE_NAME}:${VERSION}

          # Push all tags
          docker push -a $IMAGE_NAME

      - name: Create and push latest manifest image
        uses: Noelware/docker-manifest-action@master
        with:
            inputs: ${{ env.IMAGE_NAME }}:latest
            images: ${{ env.IMAGE_NAME }}:latest-linux-amd64, ${{ env.IMAGE_NAME }}:latest-linux-arm64
            push: true

      - name: Create and push ${{ env.VERSION }} manifest image
        uses: Noelware/docker-manifest-action@master
        with:
            inputs: ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
            images: ${{ env.IMAGE_NAME }}:${{ env.VERSION }}-linux-amd64, ${{ env.IMAGE_NAME }}:${{ env.VERSION }}-linux-arm64
            push: true

      - name: Create and push ${{ env.MAJOR_MINOR }} manifest image
        uses: Noelware/docker-manifest-action@master
        with:
            inputs: ${{ env.IMAGE_NAME }}:${{ env.MAJOR_MINOR }}
            images: ${{ env.IMAGE_NAME }}:${{ env.MAJOR_MINOR }}-linux-amd64, ${{ env.IMAGE_NAME }}:${{ env.MAJOR_MINOR }}-linux-arm64
            push: true
